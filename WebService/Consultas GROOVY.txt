//LISTAR SOLO GRUPOS


import org.bonitasoft.engine.identity.GroupCriterion;
import org.bonitasoft.engine.identity.Group;
import org.bonitasoft.engine.identity.User;
import org.bonitasoft.engine.identity.UserCriterion;
 


List<User> users = apiAccessor.getIdentityAPI().getUsers(0, 10000, UserCriterion.FIRST_NAME_ASC);

List<Group> groups=apiAccessor.getIdentityAPI().getGroups(0,10000,GroupCriterion.NAME_ASC);

List<String> list = new ArrayList<String>();


for(Group group:groups){
	list.add(group.getName());
	
}
 
 return list;
 
//LISTAR TODOS LOS USUARIOS



import org.bonitasoft.engine.identity.User;
import org.bonitasoft.engine.identity.UserCriterion;
 


List<User> users = apiAccessor.getIdentityAPI().getUsers(0, 10000, UserCriterion.FIRST_NAME_ASC);
 
List<String> list = new ArrayList<String>();
 
for (int i=0; i<users.size(); i++){
	
	list.add(users.get(i).getUserName());
}
return list;
 
 
 
 
 //LISTAR USUARIOS DE LOS GRUPOS EN PARTICULAR
 
 
 Group groupSelected=apiAccessor.getIdentityAPI().getGroupByPath("/acme/hr");<br />
 List<User> usersInGroup=apiAccessor.getIdentityAPI().getUsersInGroup(groupSelected.getId(), 0, 100, UserCriterion.FIRST_NAME_ASC);<br />
  StringBuilder sb=new StringBuilder();<br />
 for (User user:usersInGroup){<br />
       //get professional contact data<br />
       ContactData contactData = apiAccessor.getIdentityAPI().getUserContactData(user.getId(), false);<br />
        if (contactData!=null && contactData.getEmail()!=null && !contactData.getEmail().isEmpty()){<br />
           sb.append(contactData.getEmail()).append(",");<br />
       }<br />
  }<br />
  return sb.toString();
  
  
  
  
  
  
  //Conector Rest Groovy
  
  import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
 
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
 

//URL url = new URL("http://localhost:8080/WebServiceRestFullGlashFish/app/personas/listar?");

URL url = new URL("http://localhost:8080/WebService/app/personas/buscar?nom="+nombre);

String user = url.getText();
 
 
return user;
  
  
  

  
  
  //JSON
  
  
 import groovy.json.JsonSlurper;
URL url = new URL("http://localhost/dds/servicio1?dato=" + dato)
String content = url.getText();
JsonSlurper jsonSlurper = new JsonSlurper();
def object = jsonSlurper.parseText(content);
return object;
  
  
  
  //Filtros
  
  
  Hola, la idea es usar un filtro de usuario pero simple. En la tarea realizar experimento (que es la que querés asignar), en la solapa de actores definí un filtro simple donde retornes el grupo que acabás de crear en Bonita dentro de un script grrovy.

Fijate que al crear el filtro, en la tercera ventana te vas a encontrar con una ventana que dice "Id de Usuario" y ahí podés poner un script. 

El script tuyo debería retornar algo así

return apiAccessor.getIdentityAPI().getUserByUserName(actor).getId();

Pero en vez de getUserByUserName tendrías que usar un método tipo getGroup o getGroupByPath

Acá te paso la URL con la documentación de la API de groups, saludos

http://documentation.bonitasoft.com/javadoc/api/6.0/sp/common/org/bonitasoft/engine/api/GroupAPI.html



//Asignar tarea a un usuario

Para asignar la tarea a un usuario específico el código sería similar al siguiente

User u = apiAccessor.getIdentityAPI().getUserByUserName("UPasante2");

apiAccessor.getProcessAPI().assignUserTask(activityInstanceId,u.getId());

Saludos
  
  
//LISTAR TAREAS 


HashSet tasks = apiAccessor.getQueryRuntimeAPI().getTaskList(user,ActivityState.READY)


If you want to find task that have already been done, you should use ActivityState.FINISHED value.
  
  
//
Admin:vero-pedro
Investigadores:carla90
Pasantes:juan90,LucasD
Revisor:jfarfan
  
  
  
